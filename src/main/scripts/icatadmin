#!/usr/bin/env python

import os
import json
import httplib
from urllib import urlencode
import sys
from optparse import OptionParser
from urlparse import urlparse
import ssl
import logging
import getpass
from suds.client import Client, WebFault
import subprocess
import shlex
try:
    import readline
except:  # Probably windows
    pass

def readServices(path):
    try:
        result = {}
        with open(path) as ss:
            for line in ss.readlines():
                i = line.index(" ")
                key = line[:i].strip()
                value = line[i + 1:].strip()
                result[key] = value
        return result
    except IOError:
        return None

def reportProblem(wf):
    fault = wf.fault
    try:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except:
        fatal(fault.faultstring)

def getService():
    hurl = url
    suffix = "/ICATService/ICAT?wsdl"
    if not url.endswith(suffix): hurl = hurl + suffix
 
    client = Client(hurl)
    service = client.service
    factory = client.factory
    credentials = factory.create("credentials")
    for i in range (0, len(creds), 2):
        entry = factory.create("credentials.entry")
        entry.key = creds[i]   
        if creds[i + 1] == "-":
            entry.value = getpass.getpass()
        else:
            entry.value = creds[i + 1]
        credentials.entry.append(entry)
    sessionId = service.login(plugin, credentials)
        
    return client.service, sessionId
 

def getProperties(args):
    parser.set_usage(usagebase + "properties")
    parser.set_description("Display icat properties") 
    options, args = parser.parse_args(args)

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'properties'")

    try:
        service, sessionId = getService()
        for prop in service.getProperties(sessionId): print prop
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)
    
def clear(args):
    parser.set_usage(usagebase + "clear")
    parser.set_description("Clear all lucene indices")
    options, args = parser.parse_args(args)

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'clear'")

    try:
        service, sessionId = getService()
        parameters = {"sessionId": sessionId}
        _process("lucene/db/", parameters, "DELETE")
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)

def commit(args): 
    parser.set_usage(usagebase + "commit")
    parser.set_description("Commit all lucene indices")
    options, args = parser.parse_args(args)

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'commit'")

    try:
        service, sessionId = getService()
        parameters = {"sessionId": sessionId}
        _process("lucene/db/", parameters, "POST")
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)
        
def _process(relativeUrl, parameters, method, headers=None, body=None):
     path = icatpath + relativeUrl
     if parameters: parameters = urlencode(parameters)
     if parameters and method != "POST":
         path = path + "?" + parameters
     urllen = 4 + len(path) + len(host)
     if secure:
         conn = httplib.HTTPSConnection(host)
         urllen += 5
     else:
         conn = httplib.HTTPConnection(host)
         urllen += 4
     if urllen > 2048: fatal("Generated URI is of length " + urllen + " which exceeds 2048")
          
     conn.putrequest(method, path, skip_accept_encoding=True)
     conn.putheader("Cache-Control", "no-cache")
     conn.putheader("Pragma", "no-cache")
     conn.putheader("Accept", "text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2")
     conn.putheader("Connection", "keep-alive") 
     
     if parameters and method == "POST":
         conn.putheader('Content-Length', str(len(parameters)))
     elif body:
         conn.putheader('Transfer-Encoding', 'chunked')
        
     if headers:
         for header in headers:
             conn.putheader(header, headers[header])
             
     if parameters and method == "POST":
         conn.putheader('Content-Type', 'application/x-www-form-urlencoded')       
             
     conn.endheaders()
     
     if parameters and method == "POST":
         conn.send(parameters)
     elif body:
         blocksize = 8192
         datablock = body.read(blocksize)
         crc32 = 0
         while datablock:
             conn.send(hex(len(datablock))[2:] + "\r\n")
             conn.send(datablock + "\r\n")
             crc32 = zlib.crc32(datablock, crc32)
             datablock = body.read(blocksize)
         conn.send("0\r\n\r\n")
    
     response = conn.getresponse()
     rc = response.status
     if (rc / 100 != 2):
         try:
             responseContent = response.read()
             om = json.loads(responseContent)
         except Exception:
             fatal("InternalException " + responseContent)
         code = om["code"]
         message = om["message"]
         fatal(code + " " + message)
     if body:
         return response, crc32 & 0xffffffff
     else:
         return response        
        
def getPopulating(args): 
    parser.set_usage(usagebase + "populating")
    parser.set_description("Find entity names in the populate list")
    options, args = parser.parse_args(args)

    if len(args) > 0:
        fatal("Must have no arguments after the operation 'populating'")
    try:
        service, sessionId = getService()
        parameters = {"sessionId": sessionId}
        print _process("lucene/db", parameters, "GET").read()
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)

def populate(args):
    parser.set_usage(usagebase + "populate [<name>]")
    parser.set_description("Populate lucene (for that entry name)")
    options, args = parser.parse_args(args)

    if len(args) == 0: 
        try:
            service, sessionId = getService() 
            parameters = {"sessionId": sessionId}
            for entity in service.getEntityNames():
                print entity
                _process("lucene/db/" + entity, parameters, "POST")
        except WebFault, wf:
            exc = wf.fault.detail.IcatException
            fatal(exc.type + " exception: " + exc.message)
        except Exception, e:
            fatal(e)
        return    
        
    if len(args) != 1:
        fatal("Must have zero arguments after the operation 'populate' or one - the name of the entity")
 
    try:
        service, sessionId = getService()
        parameters = {"sessionId": sessionId}
        entity = args[0]
        _process("lucene/db/" + entity, parameters, "POST")
    except WebFault, wf:
        exc = wf.fault.detail.IcatException
        fatal(exc.type + " exception: " + exc.message)
    except Exception, e:
        fatal(e)

def help(args):
    parser.set_usage(usagebase + "[subcommand [parameters...] [options...]]")
    parser.set_description("Interact with the ICATAdmin interface. Subcommands are " + str(subcommands.keys()) + 
                            """ All subcommands accept a '-h' or '--help'. """) 
    parser.print_help()

logging.basicConfig(level=logging.CRITICAL)

usagebase = "usage: %prog <url> <username> <password> "
       
subcommands = {}
subcommands["properties"] = getProperties
subcommands["populate"] = populate
subcommands["commit"] = commit
subcommands["clear"] = clear
subcommands["populating"] = getPopulating
subcommands["-h"] = help
subcommands["--help"] = help

def fatal(msg):
    print >> sys.stderr, msg
    sys.exit(1)

parser = OptionParser()

try:
    pos = sys.argv.index("--")
    start = sys.argv[1:pos]
    end = sys.argv[pos + 1:]
except ValueError:
    start = sys.argv[1:]
    end = []
 
if len(start) > 2:
    url, plugin = start[:2]
    creds = start[2:]
       
    o = urlparse(url)
    secure = o.scheme == "https"
    host = o.netloc
    icatpath = o.path
    if not icatpath.endswith("/"): icatpath = icatpath + "/"
    icatpath = icatpath + "icat/"

    if not end:
        
        try:
            service, sessionId = getService()
            service.getProperties(sessionId)
        except Exception, e:
            fatal(e)
       
        print "Use CTRL-D or 'exit' to exit"
        run = True
        while run:
            try:
                command = raw_input("icatadmin> ")
                if command:
                    if command == "exit":
                        run = False
                        continue
                    tokens = shlex.split(command)
                    op = subcommands.get(tokens[0])
                    if not op:
                        print "First argument must be one of " + str(subcommands.keys())
                    else:
                        op(tokens[1:])
            except EOFError:
                print
                sys.exit()
            except:
                pass
        sys.exit()

    op = subcommands.get(end[0])
    if op:
        op(end[1:])
    else:
        fatal("Subcommand " + end[0] + " must be one of " + str(subcommands.keys()))

else:
    fatal("First arguments must be url and plugin mnemonic followed by pairs of arguments to represent the\ncredentials (with '-' to be prompted) optionally followed by '--' and one of\n" + str(subcommands.keys()))
