#!/usr/bin/env python
from setup_utils import *
import os
import socket

# icat.server

def uninstall():
    app = actions.getAppName("icat.ear")
    if app: actions.undeploy(app)
    app = actions.getAppName("icat.server")
    if app: actions.undeploy(app)
    actions.unregisterDB("icat")
    actions.deleteJMSResource("jms/ICAT/TopicConnectionFactory")
    actions.deleteJMSResource("jms/ICAT/Topic")
    actions.deleteJMSResource("jms/ICAT/CentralConnectionFactory") 
    actions.deleteJMSResource("jms/ICAT/Synch")
    
actions, options, arg = getActions(binDir=True)
props = actions.getGlassfish("icat-setup.properties", ["dbProperties", "glassfish", "driver", "port"])

binDir = os.path.expanduser(options.binDir)
files = ["testicat", "icatadmin"]
prop_name = "icat.properties"
prop_list = ["lifetimeMinutes", "rootUserNames", "authn.list", "notification.list", "log.list"]

if arg in ["CONFIGURE", "INSTALL"]:
    actions.configure(prop_name, prop_list) 
    icatProperties = actions.getProperties(prop_name, prop_list)
    log4jProperties = icatProperties.get("log4j.properties")
    if log4jProperties:actions.configure(os.path.basename(log4jProperties), [], log4jProperties)
    actions.checkNoErrors()

if arg == "INSTALL":       
    for v in icatProperties["authn.list"].split():
        if "authn." + v + ".jndi" not in icatProperties:
            abort ("authn.list included " + v + " but authn." + v + ".jndi is not defined") 
    
    for v in icatProperties["notification.list"].split():
        if "notification." + v not in icatProperties:
            abort ("notification.list included " + v + " but notification." + v + " is not defined") 
   
    for v in icatProperties["log.list"].split():
        if "log." + v not in icatProperties:
            abort ("log.list included " + v + " but log." + v + " is not defined")
     
    if  log4jProperties:
        dir, file = os.path.split(log4jProperties)
        if not os.path.exists(file): abort("log4create-jms-resourcej.properties file " + file + " not found")
        
    ld = icatProperties.get("lucene.Directory")
    if ld:
        parent = os.path.basename(os.path.normpath(ld))
        if not os.path.exists(parent):
            abort("Parent directory " + parent + " of lucene directory specified in icat.properties does not exist")
            
        if not icatProperties.get("lucene.commitSeconds"):
            abort("'lucene.commitSeconds' not specified in icat.properties")
        
    actions.installFile("icat.properties")
    if log4jProperties:
        dir, file = os.path.split(log4jProperties)
        if dir:
            actions.installFile(file, dir)
        else:
            actions.installFile(file)
    
    try:           
        uninstall()
        actions.registerDB(props["driver"], props["dbProperties"], "icat")
        actions.createJMSResource("javax.jms.TopicConnectionFactory", "jms/ICAT/TopicConnectionFactory")
        actions.createJMSResource("javax.jms.Topic", "jms/ICAT/Topic")
        actions.createJMSResource("javax.jms.TopicConnectionFactory", "jms/ICAT/CentralConnectionFactory")
        actions.createJMSResource("javax.jms.Topic", "jms/ICAT/Synch")
        
        jmsHostPort = props.get("jmsHostPort")
        if jmsHostPort:
            bits = jmsHostPort.split(":")
            if len(bits) != 2: abort("jmsHostPort must contain a colon separator")
            jmsHost = bits[0].strip()
            jmsPort = bits[1].strip()
            if socket.getfqdn() == socket.getfqdn(jmsHost): 
                jmsHostPort = None
            else:
                jmsHostPort = jmsHost + ":" + jmsPort
        if jmsHostPort:
            actions.asadmin("set resources.connector-connection-pool.jms/ICAT/CentralConnectionFactory-Connection-Pool.property.AddressList=" + jmsHostPort)
            actions.asadmin("set resources.connector-connection-pool.jms/ICAT/TopicConnectionFactory-Connection-Pool.property.AddressList=" + jmsHostPort)
            
        actions.deploy("icat.server-*.war", deploymentorder=100)
        
        if not os.path.isdir(binDir): abort ("Please create directory " + binDir + " and try again.")
        for file in files:   
            if platform.system() != "Windows": os.chmod(file, 0755)    
            shutil.copy(file , binDir)
            if options.verbose:
                print "\n", file, "copied to", binDir
                
    except Exception, e:
        abort(str(e))
                
if arg == "UNINSTALL":
    icatProperties = actions.getProperties(prop_name, prop_list)
    log4jProperties = icatProperties.get("log4j.properties")
    
    actions.removeFile(prop_name)
    if log4jProperties:
        dir, file = os.path.split(log4jProperties)
        if dir:
            actions.removeFile(file, dir)
        else:
            actions.removeFile(file)
    
    try:
        uninstall()
        for file in files:
            path = os.path.join(binDir, file)    
            if os.path.exists(path): 
                os.remove(path)
                if options.verbose:
                    print file, "removed from", binDir
     
    except Exception, e:
        abort(str(e))       
    
            
    
